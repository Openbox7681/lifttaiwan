package tw.gov.mohw.hisac.web.controller.api;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import tw.gov.mohw.hisac.web.WebDatetime;
import tw.gov.mohw.hisac.web.controller.BaseController;
import tw.gov.mohw.hisac.web.dao.SystemLogVariable;


import tw.gov.mohw.hisac.web.domain.MalwareManagement;
import tw.gov.mohw.hisac.web.domain.MalwareManagementAttach;
import tw.gov.mohw.hisac.web.domain.MalwareManagementPic;
import tw.gov.mohw.hisac.web.domain.ViewMalwareManagementMember;
import tw.gov.mohw.hisac.web.domain.ViewMalwareManagementAttachMember;


import tw.gov.mohw.hisac.web.service.MalwareManagementService;
import tw.gov.mohw.hisac.web.service.MalwareManagementAttachService;
import tw.gov.mohw.hisac.web.service.MalwareManagementPicService;

/**
 * 勒索專區控制器
 */
@Controller
@RequestMapping(value = "/public/api", produces = "application/json; charset=utf-8")
public class PublicMalwareController extends BaseController {

	@Autowired
	private MalwareManagementService malwareManagementService;

	@Autowired
	private MalwareManagementAttachService malwareManagementAttachService;

	@Autowired
	private MalwareManagementPicService malwareManagementPicService;

	/**
	 * 取得勒索專區資料API
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param model
	 *            Model
	 * @param json
	 *            查詢條件
	 * @return 勒索專區資料
	 */
	@RequestMapping(value = "/malware/query", method = RequestMethod.POST)
	public String Query(Locale locale, HttpServletRequest request, Model model, @RequestBody String json) {
		JSONObject listjson = new JSONObject();
		JSONArray sn_array = new JSONArray();
		JSONObject obj = new JSONObject(json);
		obj.put("IsEnable", true);
		obj.put("IsPublic", true);
		obj.put("StartDateTime", WebDatetime.toString(new Date(), "yyyy-MM-dd"));
		obj.put("Status", "4");
		obj.put("sort", "postDateTime");
		json = obj.toString();
		List<ViewMalwareManagementMember> malwareManagements = malwareManagementService.getList(json);
		if (malwareManagements != null) {
			for (ViewMalwareManagementMember malwareManagement : malwareManagements) {
				JSONObject sn_json = new JSONObject();
				sn_json.put("Id", malwareManagement.getId());
				sn_json.put("Date", WebDatetime.toString(malwareManagement.getPostDateTime(), "yyyy-MM-dd"));
				sn_json.put("StartDateTime", WebDatetime.toString(malwareManagement.getStartDateTime(), "yyyy-MM-dd"));
				sn_json.put("EndDateTime", WebDatetime.toString(malwareManagement.getEndDateTime(), "yyyy-MM-dd"));
				sn_json.put("Title", malwareManagement.getTitle());
				sn_json.put("Content", malwareManagement.getContent().replaceAll("\\<.*?>",""));
				sn_array.put(sn_json);
			}
		}
		listjson.put("total", malwareManagementService.getListSize(json));
		listjson.put("datatable", sn_array);
		systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Success, getBaseIpAddress(), getBaseMemberAccount());
		model.addAttribute("json", listjson.toString());
		model.addAttribute("json", listjson.toString());
		return "msg";
	}

	/**
	 * 取得勒索專區資料API
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param model
	 *            Model
	 * @param json
	 *            Id
	 * @return 勒索專區資料
	 */
	@RequestMapping(value = "/malware/query/id", method = RequestMethod.POST)
	public String QueryById(Locale locale, HttpServletRequest request, Model model, @RequestBody String json) {
		JSONArray sn_array = new JSONArray();
		JSONObject obj = new JSONObject(json);
		long id = obj.isNull("Id") == true ? 0 : obj.getLong("Id");
		MalwareManagement malwareManagement = malwareManagementService.get(id);
		if (malwareManagement.getIsEnable() == true && malwareManagement.getIsPublic() == true && malwareManagement.getStatus() == 4) {
			JSONObject sn_json = new JSONObject();
			sn_json.put("Id", malwareManagement.getId());
			sn_json.put("PostType", malwareManagement.getPostType());
			sn_json.put("PostDateTime", WebDatetime.toString(malwareManagement.getPostDateTime(), "yyyy-MM-dd"));
			sn_json.put("Title", malwareManagement.getTitle());
			sn_json.put("SourceName", malwareManagement.getSourceName());
			sn_json.put("SourceLink", malwareManagement.getSourceLink());
			sn_json.put("ContentType", malwareManagement.getContentType());
			sn_json.put("Content", malwareManagement.getContent().replace("./api/p13/pic/download/", "./public/api/Malware/pic/download/"));
			sn_json.put("ExternalLink", malwareManagement.getExternalLink());
			sn_json.put("IsBreakLine", malwareManagement.getIsBreakLine());
			sn_json.put("StartDateTime", WebDatetime.toString(malwareManagement.getStartDateTime(), "yyyy-MM-dd"));
			sn_json.put("EndDateTime", WebDatetime.toString(malwareManagement.getEndDateTime(), "yyyy-MM-dd"));
			sn_json.put("IsEnable", malwareManagement.getIsEnable());
			sn_json.put("CreateId", malwareManagement.getCreateId());
			sn_json.put("CreateTime", WebDatetime.toString(malwareManagement.getCreateTime(), "yyyy-MM-dd HH:mm:ss"));
			sn_json.put("ModifyId", malwareManagement.getModifyId());
			sn_json.put("ModifyTime", WebDatetime.toString(malwareManagement.getModifyTime(), "yyyy-MM-dd HH:mm:ss"));
			sn_json.put("Status", malwareManagement.getStatus());
			
			sn_json.put("ImpactQualification", malwareManagement.getImpactQualification());
			sn_json.put("ReporterName", malwareManagement.getReporterName());
			sn_json.put("ResponderContactNumbers", malwareManagement.getResponderContactNumbers());
			sn_json.put("ResponderPartyName", malwareManagement.getResponderPartyName());
			sn_json.put("ResponderElectronicAddressIdentifiers", malwareManagement.getResponderElectronicAddressIdentifiers());
			sn_json.put("CoaDescription", malwareManagement.getCoaDescription());
			sn_json.put("Confidence", malwareManagement.getConfidence());
			sn_json.put("Reference",malwareManagement.getReference());
			sn_json.put("AffectedSoftwareDescription",malwareManagement.getAffectedSoftwareDescription());

			
			sn_array.put(sn_json);
			systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Success, getBaseIpAddress(), getBaseMemberAccount());
		} else {
			systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Fail, getBaseIpAddress(), getBaseMemberAccount());
		}
		model.addAttribute("json", sn_array.toString());
		return "msg";
	}

	/**
	 * 圖片輸出
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param response
	 *            HttpServletResponse
	 * @param MalwareManagementId
	 *            文章Id
	 * @param id
	 *            圖檔Id
	 */
	@RequestMapping(value = "/malware/pic/download/{malwareManagementId}/{id}", method = RequestMethod.GET)
	public void ShowPic(Locale locale, HttpServletRequest request, HttpServletResponse response, @PathVariable Long malwareManagementId, @PathVariable Long id) {
		JSONObject sn_json = new JSONObject();
		sn_json.put("MalwareManagementId", malwareManagementId);
		sn_json.put("Id", id);
		String json = sn_json.toString();
		if (!malwareManagementPicService.isExist(id)) {
			systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Fail, getBaseIpAddress(), getBaseMemberAccount());
			try {
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
			} catch (IOException ex) {
				//ex.printStackTrace();
			}
		} else {
			response.reset();
			MalwareManagementPic malwareManagementPic = malwareManagementPicService.getById(id);
			try {
				byte[] buffer = malwareManagementPic.getFileContent();
				response.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(malwareManagementPic.getFileName(), StandardCharsets.UTF_8.toString()));
				response.addHeader("Content-Length", "" + buffer.length);
				OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
				response.setContentType(malwareManagementPic.getFileType());
				toClient.write(buffer);
				toClient.flush();
				toClient.close();
				systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Success, getBaseIpAddress(), getBaseMemberAccount());
			} catch (IOException ex) {
				//ex.printStackTrace();
				systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Fail, getBaseIpAddress(), getBaseMemberAccount());
			}
		}
	}

	/**
	 * 取得附件資料API
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param model
	 *            Model
	 * @param json
	 *            查詢條件
	 * @return 附件資料
	 */
	@RequestMapping(value = "/malware/attach/query", method = RequestMethod.POST)
	public String QueryAttach(Locale locale, HttpServletRequest request, Model model, @RequestBody String json) {
		JSONObject listjson = new JSONObject();
		JSONArray sn_array = new JSONArray();
		JSONObject obj = new JSONObject(json);
		long malwareManagementId = obj.isNull("malwareManagementId") == true ? 0 : obj.getLong("malwareManagementId");
		List<ViewMalwareManagementAttachMember> malwareManagementAttachs = malwareManagementAttachService.getAllByMalwareManagementId(malwareManagementId);
		if (malwareManagementAttachs != null) {
			for (ViewMalwareManagementAttachMember malwareManagementAttach : malwareManagementAttachs) {
				long size = malwareManagementAttach.getFileSize();
				if (size <= 0)
					return "0";
				final String[] units = new String[]{"B", "KB", "MB", "GB", "TB"};
				int digitGroups = (int) (Math.log10(size) / Math.log10(1024));
				String fileSize = new DecimalFormat("#,##0.#").format(size / Math.pow(1024, digitGroups)) + " " + units[digitGroups];
				JSONObject sn_json = new JSONObject();
				sn_json.put("MalwareManagementId", malwareManagementAttach.getMalwareManagementId());
				sn_json.put("Id", malwareManagementAttach.getId());
				sn_json.put("FileName", malwareManagementAttach.getFileName());
				sn_json.put("FileType", malwareManagementAttach.getFileType());
				sn_json.put("FileSize", fileSize);
				sn_json.put("FileHash", malwareManagementAttach.getFileHash());
				sn_json.put("FileDesc", malwareManagementAttach.getFileDesc());
				sn_json.put("CreateId", malwareManagementAttach.getCreateId());
				sn_json.put("CreateName", malwareManagementAttach.getCreateName());
				sn_json.put("CreateTime", WebDatetime.toString(malwareManagementAttach.getCreateTime()));
				sn_json.put("ModifyId", malwareManagementAttach.getModifyId());
				sn_json.put("ModifyName", malwareManagementAttach.getModifyName());
				sn_json.put("ModifyTime", WebDatetime.toString(malwareManagementAttach.getModifyTime()));
				sn_array.put(sn_json);
			}
			listjson.put("datatable", sn_array);
			systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Success, getBaseIpAddress(), getBaseMemberAccount());
		}
		model.addAttribute("json", listjson.toString());
		return "msg";
	}

	/**
	 * 附件下載
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param response
	 *            HttpServletResponse
	 * @param MalwareManagementId
	 *            文章Id
	 * @param id
	 *            附件Id
	 */
	@RequestMapping(value = "/malware/attach/download/{malwareManagementId}/{id}", method = RequestMethod.GET)
	public void DownloadAttach(Locale locale, HttpServletRequest request, HttpServletResponse response, @PathVariable Long malwareManagementId, @PathVariable Long id) {
		JSONObject sn_json = new JSONObject();
		sn_json.put("MalwareManagementId", malwareManagementId);
		sn_json.put("Id", id);
		String json = sn_json.toString();
		if (!malwareManagementService.isExist(malwareManagementId)) {
			systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Fail, getBaseIpAddress(), getBaseMemberAccount());
			try {
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
			} catch (IOException ex) {
				//ex.printStackTrace();
			}
		} else if (!malwareManagementAttachService.isExist(id)) {
			systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Fail, getBaseIpAddress(), getBaseMemberAccount());
			try {
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
			} catch (IOException ex) {
				//ex.printStackTrace();
			}
		} else {
			response.reset();
			MalwareManagementAttach malwareManagementAttach = malwareManagementAttachService.getById(id);
			try {
				byte[] buffer = malwareManagementAttach.getFileContent();
				response.addHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(malwareManagementAttach.getFileName(), StandardCharsets.UTF_8.toString()));
				response.addHeader("Content-Length", "" + buffer.length);
				OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
				response.setContentType("application/octet-stream");
				toClient.write(buffer);
				toClient.flush();
				toClient.close();
				systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Success, getBaseIpAddress(), getBaseMemberAccount());
			} catch (IOException ex) {
				//ex.printStackTrace();
				systemLogService.insert(baseControllerName, baseActionName, json, SystemLogVariable.Action.Read, SystemLogVariable.Status.Fail, getBaseIpAddress(), getBaseMemberAccount());
			}
		}
	}
}
