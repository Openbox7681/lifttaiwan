package tw.gov.mohw.hisac.web.dao;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.json.JSONObject;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import tw.gov.mohw.hisac.web.domain.MalwareReport;

@Repository
@Transactional
public class MalwareReportDAOImpl extends BaseSessionFactory implements MalwareReportDAO {

	public void insert(MalwareReport entity) {
		getSessionFactory().getCurrentSession().save(entity);
	}

	public void delete(MalwareReport entity) {
		getSessionFactory().getCurrentSession().delete(entity);
	}

	@SuppressWarnings({ "unchecked", "deprecation" })
	public List<MalwareReport> getList(Long memberId, JSONObject obj) {
		int start = obj.isNull("start") == true ? 0 : obj.getInt("start");
		int maxRows = obj.isNull("maxRows") == true ? 1 : obj.getInt("maxRows");
		boolean dir = obj.isNull("dir") == true ? false : obj.getBoolean("dir");
		String sort = obj.isNull("sort") == true ? "id" : obj.getString("sort");
		long id = obj.isNull("Id") == true ? 0 : obj.getLong("Id");

		Criteria cr = getSessionFactory().getCurrentSession().createCriteria(MalwareReport.class);
		if (id != 0)
			cr.add(Restrictions.eq("id", id));
		if (null != memberId) {
			cr.add(Restrictions.eq("createId", memberId));
		}

		if (dir == true)
			cr.addOrder(Order.desc(sort));
		else
			cr.addOrder(Order.asc(sort));
		cr.setFirstResult(start);
		cr.setMaxResults(maxRows);
		List<MalwareReport> list = cr.list();
		if (list.size() > 0) {
			return list;
		} else {
			return null;
		}
	}

	@Transactional
	@SuppressWarnings({ "deprecation" })
	public long getListSize(Long memberId, JSONObject obj) {		
		Criteria cr = getSessionFactory().getCurrentSession().createCriteria(MalwareReport.class);
		cr.setProjection(Projections.rowCount());		
		if (null != memberId) {
			cr.add(Restrictions.eq("createId", memberId));
		}
		long total = (long) cr.list().get(0);
		return total;
	}
}