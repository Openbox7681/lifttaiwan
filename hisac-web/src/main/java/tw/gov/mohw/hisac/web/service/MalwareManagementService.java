package tw.gov.mohw.hisac.web.service;

import java.text.MessageFormat;
import java.util.Date;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import tw.gov.mohw.hisac.web.WebDatetime;
import tw.gov.mohw.hisac.web.dao.MalwareManagementDAO;
import tw.gov.mohw.hisac.web.dao.TicketQueueDAO;
import tw.gov.mohw.hisac.web.domain.MalwareManagement;
import tw.gov.mohw.hisac.web.domain.Member;
import tw.gov.mohw.hisac.web.domain.SpMalwareManagementReport;
import tw.gov.mohw.hisac.web.domain.SpButtonCount;
import tw.gov.mohw.hisac.web.domain.ViewMalwareManagementMember;
import tw.gov.mohw.hisac.web.domain.ViewMessageAlertEvent;
import tw.gov.mohw.hisac.web.domain.ViewSubscribeMember;

/**
 * 勒索專區文章管理服務
 */
@Service
public class MalwareManagementService {
	@Autowired
	MalwareManagementDAO malwareManagementDAO;

	@Autowired
	TicketQueueDAO ticketQueueDAO;
	@Autowired
	private MemberService memberService;
	@Autowired
	protected ResourceMessageService resourceMessageService;
	@Autowired
	private MailService mailService;
	@Autowired
	private SubscribeMemberService subscribeMemberService;	

	static String malwareGlobalData = null;
	static String malwareGlobalDataPublic = null;

	public void setGlobalData(String globalData) {
		malwareGlobalData = globalData;
	}

	public void resetGlobalData() {
		malwareGlobalData = null;
	}

	public String getGlobalData() {
		return malwareGlobalData;
	}

	public void setGlobalDataPublic(String globalDataPublic) {
		malwareGlobalDataPublic = globalDataPublic;
	}

	public void resetGlobalDataPublic() {
		malwareGlobalDataPublic = null;
	}

	public String getGlobalDataPublic() {
		return malwareGlobalDataPublic;
	}

	/**
	 * 取得所有勒索專區管理資料
	 * 
	 * @return 勒索專區管理資料
	 */
	public List<MalwareManagement> getAll() {
		return malwareManagementDAO.getAll();
	}

	/**
	 * 取得勒索專區管理資料
	 * 
	 * @param json
	 *            查詢條件
	 * @return 勒索專區管理資料
	 */
	public List<ViewMalwareManagementMember> getList(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getList(obj);
		} catch (Exception e) {
			return null;
		}
	}
	
	/**
	 * 取得報表
	 * 
	 * @param json
	 *            查詢條件
	 * @return 報表
	 */
	public List<SpMalwareManagementReport> getReport(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getReport(obj);
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 取得勒索專區管理資料筆數
	 * 
	 * @param json
	 *            查詢條件
	 * @return 活動訊息管理資料筆數
	 */
	public long getListSize(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getListSize(obj);
		} catch (Exception e) {
			return 0;
		}
	}

	/**
	 * 新增勒索專區管理資料
	 * 
	 * @param memberId
	 *            使用者Id
	 * @param json
	 *            活動訊息管理資料
	 * @param isApply
	 *            是否允許
	 * @return 活動訊息管理資料
	 */
	public MalwareManagement insert(Long memberId, String json, Boolean isApply) {
		try {
			JSONObject obj = new JSONObject(json);
			String postType = "13";
			Date postDateTime = obj.isNull("PostDateTime") == true ? new Date() : WebDatetime.parse(obj.getString("PostDateTime"), "yyyy-MM-dd");
			String title = obj.isNull("Title") == true ? null : obj.getString("Title");
			String sourceName = obj.isNull("SourceName") == true ? null : obj.getString("SourceName");
			String sourceLink = obj.isNull("SourceLink") == true ? null : obj.getString("SourceLink");
			String contentType = obj.isNull("ContentType") == true ? null : obj.getString("ContentType");
			String content = obj.isNull("Content") == true ? null : obj.getString("Content");
			String externalLink = obj.isNull("ExternalLink") == true ? null : obj.getString("ExternalLink");
			Boolean isBreakLine = obj.isNull("IsBreakLine") == true ? null : obj.getBoolean("IsBreakLine");
			Date startDateTime = obj.isNull("StartDateTime") == true ? WebDatetime.parse("1753-01-01", "yyyy-MM-dd") : WebDatetime.parse(obj.getString("StartDateTime"), "yyyy-MM-dd");
			Date endDateTime = obj.isNull("EndDateTime") == true ? WebDatetime.parse("9999-12-31", "yyyy-MM-dd") : WebDatetime.parse(obj.getString("EndDateTime"), "yyyy-MM-dd");
			Boolean isEnable = obj.isNull("IsEnable") == true ? null : obj.getBoolean("IsEnable");
			Boolean isPublic = obj.isNull("IsPublic") == true ? null : obj.getBoolean("IsPublic");
			Long status = obj.isNull("Status") == true ? 0 : obj.getLong("Status");
			Long sort = obj.isNull("Sort") == true ? 0 : obj.getLong("Sort");	
			
			//20210505 新增欄位 針對資安訊息情報欄位擴充
			String incidentId = obj.isNull("IncidentId") == true ? "" : obj.getString("IncidentId");
			String eventTypeCode = obj.isNull("EventTypeCode") == true ? null : obj.getString("EventTypeCode");
			String reporterName = obj.isNull("ReporterName") == true ? "" : obj.getString("ReporterName");
			String responderPartyName = obj.isNull("ResponderPartyName") == true ? null : obj.getString("ResponderPartyName");
			String responderContactNumbers = obj.isNull("ResponderContactNumbers") == true ? null : obj.getString("ResponderContactNumbers");
			Long impactQualification = obj.isNull("ImpactQualification") == true ? 0 : obj.getLong("ImpactQualification");
			String coaDescription = obj.isNull("CoaDescription") == true ? null : obj.getString("CoaDescription");
			String confidence = obj.isNull("Confidence") == true ? null : obj.getString("Confidence");
			String reference = obj.isNull("Reference") == true ? null : obj.getString("Reference");
			String affectedSoftwareDescription = obj.isNull("AffectedSoftwareDescription") == true ? null : obj.getString("AffectedSoftwareDescription");





			// 流程紀錄用 - 開始
			String tableName = obj.isNull("TableName") == true ? null : obj.getString("TableName");
			String pre = obj.isNull("Pre") == true ? null : obj.getString("Pre");
			String postId = ticketQueueDAO.insertPostId(tableName, isApply, pre, "MALWARE");


			// 流程紀錄用 - 開始

			Date now = new Date();
			MalwareManagement entity = new MalwareManagement();
			entity.setPostId(postId);
			entity.setPostType(postType);
			entity.setPostDateTime(postDateTime);
			entity.setTitle(title);
			entity.setSourceName(sourceName);
			entity.setSourceLink(sourceLink);
			entity.setContentType(contentType);
			entity.setContent(content);
			entity.setExternalLink(externalLink);
			entity.setIsBreakLine(isBreakLine);
			entity.setStartDateTime(startDateTime);
			entity.setEndDateTime(endDateTime);
			entity.setIsEnable(isEnable);
			entity.setIsPublic(isPublic);
			entity.setCreateId(memberId);
			entity.setCreateTime(now);
			entity.setModifyId(memberId);
			entity.setModifyTime(now);
			entity.setStatus(status);
			entity.setSort(sort);
			
			entity.setIncidentId(incidentId);
			entity.setEventTypeCode(eventTypeCode);
			entity.setReporterName(reporterName);
			entity.setResponderPartyName(responderPartyName);
			entity.setResponderContactNumbers(responderContactNumbers);
			entity.setImpactQualification(impactQualification);
			entity.setCoaDescription(coaDescription);
			entity.setConfidence(confidence);
			entity.setReference(reference);
			entity.setAffectedSoftwareDescription(affectedSoftwareDescription);
			
			
		
			malwareManagementDAO.insert(entity);
			resetGlobalData();
			resetGlobalDataPublic();
			return entity;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 更新勒索專區管理資料
	 * 
	 * @param memberId
	 *            使用者Id
	 * @param json
	 *            勒索專區管理資料
	 * @param isApply
	 *            是否允許
	 * @return 勒索專區管理資料
	 */
	public MalwareManagement update(long memberId, String json, Boolean isApply) {
		try {
			JSONObject obj = new JSONObject(json);
			Long id = obj.isNull("Id") == true ? 0 : obj.getLong("Id");
			String postType = "13";
			Date postDateTime = obj.isNull("PostDateTime") == true ? new Date() : WebDatetime.parse(obj.getString("PostDateTime"), "yyyy-MM-dd");
			String title = obj.isNull("Title") == true ? null : obj.getString("Title");
			String sourceName = obj.isNull("SourceName") == true ? null : obj.getString("SourceName");
			String sourceLink = obj.isNull("SourceLink") == true ? null : obj.getString("SourceLink");
			String contentType = obj.isNull("ContentType") == true ? null : obj.getString("ContentType");
			String content = obj.isNull("Content") == true ? null : obj.getString("Content");
			String externalLink = obj.isNull("ExternalLink") == true ? null : obj.getString("ExternalLink");
			Boolean isBreakLine = obj.isNull("IsBreakLine") == true ? null : obj.getBoolean("IsBreakLine");
			Date startDateTime = obj.isNull("StartDateTime") == true ? WebDatetime.parse("1753-01-01", "yyyy-MM-dd") : WebDatetime.parse(obj.getString("StartDateTime"), "yyyy-MM-dd");
			Date endDateTime = obj.isNull("EndDateTime") == true ? WebDatetime.parse("9999-12-31", "yyyy-MM-dd") : WebDatetime.parse(obj.getString("EndDateTime"), "yyyy-MM-dd");
			Boolean isEnable = obj.isNull("IsEnable") == true ? null : obj.getBoolean("IsEnable");
			Boolean isPublic = obj.isNull("IsPublic") == true ? null : obj.getBoolean("IsPublic");
			Long status = obj.isNull("Status") == true ? 0 : obj.getLong("Status");
			Long sort = obj.isNull("Sort") == true ? 0 : obj.getLong("Sort");
			
			//20210505 新增欄位 針對資安訊息情報欄位擴充
			String incidentId = obj.isNull("IncidentId") == true ? null : obj.getString("IncidentId");
			String eventTypeCode = obj.isNull("EventTypeCode") == true ? null : obj.getString("EventTypeCode");
			String reporterName = obj.isNull("ReporterName") == true ? "" : obj.getString("ReporterName");
			String responderPartyName = obj.isNull("ResponderPartyName") == true ? null : obj.getString("ResponderPartyName");
			String responderContactNumbers = obj.isNull("ResponderContactNumbers") == true ? null : obj.getString("ResponderContactNumbers");
			Long impactQualification = obj.isNull("ImpactQualification") == true ? 0 : obj.getLong("ImpactQualification");
			String coaDescription = obj.isNull("CoaDescription") == true ? null : obj.getString("CoaDescription");
			String confidence = obj.isNull("Confidence") == true ? null : obj.getString("Confidence");
			String reference = obj.isNull("Reference") == true ? null : obj.getString("Reference");
			String affectedSoftwareDescription = obj.isNull("AffectedSoftwareDescription") == true ? null : obj.getString("AffectedSoftwareDescription");




			Date now = new Date();
			MalwareManagement entity = malwareManagementDAO.get(id);

			// 流程紀錄用 - 開始
			String postId = ticketQueueDAO.updatePostId("malware_management", isApply, "HISAC", entity.getPostId(), "MALWARE");
			// 流程紀錄用 - 結束

			entity.setPostId(postId);
			entity.setPostType(postType);
			entity.setPostDateTime(postDateTime);
			entity.setTitle(title);
			entity.setSourceName(sourceName);
			entity.setSourceLink(sourceLink);
			entity.setContentType(contentType);
			entity.setContent(content);
			entity.setExternalLink(externalLink);
			entity.setIsBreakLine(isBreakLine);
			entity.setStartDateTime(startDateTime);
			entity.setEndDateTime(endDateTime);
			entity.setIsEnable(isEnable);
			entity.setIsPublic(isPublic);
			entity.setModifyId(memberId);
			entity.setModifyTime(now);
			entity.setStatus(status);
			entity.setSort(sort);
			
			entity.setIncidentId(incidentId);
			entity.setEventTypeCode(eventTypeCode);
			entity.setReporterName(reporterName);
			entity.setResponderPartyName(responderPartyName);
			entity.setResponderContactNumbers(responderContactNumbers);
			entity.setImpactQualification(impactQualification);
			entity.setCoaDescription(coaDescription);
			entity.setConfidence(confidence);
			entity.setReference(reference);
			entity.setAffectedSoftwareDescription(affectedSoftwareDescription);
			
			
			
			malwareManagementDAO.update(entity);
			resetGlobalData();
			resetGlobalDataPublic();
			return entity;
		} catch (Exception e) {
			//e.printStackTrace();
			return null;
		}
	}

	/**
	 * 更新勒索專區資料
	 * 
	 * @param memberId
	 *            使用者Id
	 * @param json
	 *            最新消息資料
	 * @param isApply
	 *            是否允許
	 * @return 勒索專區資料
	 */
	public MalwareManagement modify(long memberId, String json, Boolean isApply) {
		try {
			JSONObject obj = new JSONObject(json);
			Long id = obj.isNull("Id") == true ? 0 : obj.getLong("Id");
			String postType = "13";
			Date postDateTime = obj.isNull("PostDateTime") == true ? new Date() : WebDatetime.parse(obj.getString("PostDateTime"), "yyyy-MM-dd");
			String title = obj.isNull("Title") == true ? null : obj.getString("Title");
			String sourceName = obj.isNull("SourceName") == true ? null : obj.getString("SourceName");
			String sourceLink = obj.isNull("SourceLink") == true ? null : obj.getString("SourceLink");
			String contentType = obj.isNull("ContentType") == true ? null : obj.getString("ContentType");
			String content = obj.isNull("Content") == true ? null : obj.getString("Content");
			String externalLink = obj.isNull("ExternalLink") == true ? null : obj.getString("ExternalLink");
			Boolean isBreakLine = obj.isNull("IsBreakLine") == true ? null : obj.getBoolean("IsBreakLine");
			Date startDateTime = obj.isNull("StartDateTime") == true ? WebDatetime.parse("1753-01-01", "yyyy-MM-dd") : WebDatetime.parse(obj.getString("StartDateTime"), "yyyy-MM-dd");
			Date endDateTime = obj.isNull("EndDateTime") == true ? WebDatetime.parse("9999-12-31", "yyyy-MM-dd") : WebDatetime.parse(obj.getString("EndDateTime"), "yyyy-MM-dd");
			Boolean isEnable = obj.isNull("IsEnable") == true ? null : obj.getBoolean("IsEnable");
			Boolean isPublic = obj.isNull("IsPublic") == true ? null : obj.getBoolean("IsPublic");
			Long status = obj.isNull("Status") == true ? 0 : obj.getLong("Status");
			Long sort = obj.isNull("Sort") == true ? 0 : obj.getLong("Sort");		
			
			//20210505 新增欄位 針對資安訊息情報欄位擴充
			String incidentId = obj.isNull("IncidentId") == true ? null : obj.getString("IncidentId");
			String eventTypeCode = obj.isNull("EventTypeCode") == true ? null : obj.getString("EventTypeCode");
			String reporterName = obj.isNull("ReporterName") == true ? "" : obj.getString("ReporterName");
			String responderPartyName = obj.isNull("ResponderPartyName") == true ? null : obj.getString("ResponderPartyName");
			String responderContactNumbers = obj.isNull("ResponderContactNumbers") == true ? null : obj.getString("ResponderContactNumbers");
			Long impactQualification = obj.isNull("ImpactQualification") == true ? 0 : obj.getLong("ImpactQualification");
			String coaDescription = obj.isNull("CoaDescription") == true ? null : obj.getString("CoaDescription");
			String confidence = obj.isNull("Confidence") == true ? null : obj.getString("Confidence");
			String reference = obj.isNull("Reference") == true ? null : obj.getString("Reference");
			String affectedSoftwareDescription = obj.isNull("AffectedSoftwareDescription") == true ? null : obj.getString("AffectedSoftwareDescription");




			Date now = new Date();

			MalwareManagement entity = malwareManagementDAO.get(id);

			entity.setPostType(postType);
			entity.setPostDateTime(postDateTime);
			entity.setTitle(title);
			entity.setSourceName(sourceName);
			entity.setSourceLink(sourceLink);
			entity.setContentType(contentType);
			entity.setContent(content);
			entity.setExternalLink(externalLink);
			entity.setIsBreakLine(isBreakLine);
			entity.setStartDateTime(startDateTime);
			entity.setEndDateTime(endDateTime);
			entity.setIsEnable(isEnable);
			entity.setIsPublic(isPublic);
			entity.setModifyId(memberId);
			entity.setModifyTime(now);
			entity.setStatus(status);
			entity.setSort(sort);
			
			entity.setIncidentId(incidentId);
			entity.setEventTypeCode(eventTypeCode);
			entity.setReporterName(reporterName);
			entity.setResponderPartyName(responderPartyName);
			entity.setResponderContactNumbers(responderContactNumbers);
			entity.setImpactQualification(impactQualification);
			entity.setCoaDescription(coaDescription);
			entity.setConfidence(confidence);
			entity.setReference(reference);
			entity.setAffectedSoftwareDescription(affectedSoftwareDescription);
			
			
			
			
			
			
			malwareManagementDAO.update(entity);
			resetGlobalData();
			resetGlobalDataPublic();
			return entity;
		} catch (Exception e) {
			//e.printStackTrace();
			return null;
		}
	}

	/**
	 * 停用勒索專區資料
	 * 
	 * @param memberId
	 *            使用者Id
	 * @param json
	 *            活動訊息資料
	 * @return 活動訊息資料
	 */
	public MalwareManagement disable(long memberId, Long id) {
		try {
			Date now = new Date();
			MalwareManagement entity = malwareManagementDAO.get(id);
			entity.setIsEnable(false);
			entity.setModifyId(memberId);
			entity.setModifyTime(now);
			malwareManagementDAO.update(entity);
			resetGlobalData();
			resetGlobalDataPublic();
			return entity;
		} catch (Exception e) {
			//e.printStackTrace();
			return null;
		}
	}

	/**
	 * 刪除勒索專區管理資料
	 * 
	 * @param id
	 *            活動訊息管理Id
	 * @return 是否刪除成功
	 */
	public boolean delete(Long id) {
		try {
			MalwareManagement entity = malwareManagementDAO.get(id);
			malwareManagementDAO.delete(entity);
			resetGlobalData();
			resetGlobalDataPublic();
			return true;
		} catch (Exception e) {
			//e.printStackTrace();
			return false;
		}
	}

	/**
	 * 勒索專區管理資料是否存在
	 * 
	 * @param id
	 *            勒索專區管理資料Id
	 * @return 是否存在
	 */
	public boolean isExist(Long id) {
		return malwareManagementDAO.get(id) != null;
	}

	/**
	 * 取得勒索專區管理資料
	 * 
	 * @param id
	 *            勒索專區管理資料Id
	 * @return 勒索專區管理資料
	 */
	public MalwareManagement get(Long id) {
		return malwareManagementDAO.get(id);
	}

	/**
	 * 取得勒索專區管理資料
	 * 
	 * @param id
	 *            勒索專區管理資料Id
	 * @return 勒索專區管理資料
	 */
	public ViewMalwareManagementMember getByDetail(Long id) {
		return malwareManagementDAO.getByDetail(id);
	}

	/**
	 * 審核勒索專區資料
	 * 
	 * @param memberId
	 *            使用者Id
	 * @param id
	 *            勒索專區Id
	 * @param status
	 *            String
	 * @return 勒索專區資料
	 */
	public MalwareManagement examine(long memberId, String id, String status) {
		try {
			Date now = new Date();
			MalwareManagement entity = malwareManagementDAO.get(Long.parseLong(id, 10));
			Member member = memberService.get(entity.getModifyId());

			// 3-審核中 → 4-已公告
			if (status.equals("4")) {

				String postId = ticketQueueDAO.updatePostId("malware_management", true, "HISAC", entity.getPostId(), "MALWARE");

				// 寄信
				// 收件者：entity.getEmail()
				// 主旨：H-ISAC勒索專區文章(postId)審核通過通知
				// 內容：entity.getName()，您好！您所新增之勒索專區文章(entity.getPostId())，正式文章編號為：postId，經H-ISAC內容審核者審核通過並已發布，特此通知，謝謝！
				String mailSubject = MessageFormat.format(resourceMessageService.getMessageValue("mailMalware3To4Subject"), postId);
				String mailBody = MessageFormat.format(resourceMessageService.getMessageValue("mailMalware3To4Body"), member.getName(), entity.getPostId(), postId);
				mailService.Send(this.getClass().getSimpleName() + " - " + Thread.currentThread().getStackTrace()[1].getMethodName(), member.getEmail(), member.getSpareEmail(), null, mailSubject, mailBody, null);

				// 寄信給訂閱者
				String messageValue_SubscribeSubject = resourceMessageService.getMessageValue("mailSubscribeSubject");
				String messageValue_SubscribeBody = resourceMessageService.getMessageValue("mailSubscribeBody");
				String subscribeName = "勒索專區";
				JSONArray recipientBccs =  new JSONArray();				
				// String recipients = "hisac-cs@mohw.gov.tw";
				String recipients = resourceMessageService.getMessageValue("globalFooterEmail");
				List<ViewSubscribeMember> viewSubscribeMembers = null;											
				viewSubscribeMembers = subscribeMemberService.getBySubscribeName(subscribeName);
				if (viewSubscribeMembers != null) {
					for (ViewSubscribeMember viewSubscribeMember : viewSubscribeMembers) {
						recipientBccs.put(viewSubscribeMember.getEmail());								
					}
				}
				String mailSubject_Subscribe = messageValue_SubscribeSubject;
				String mailBody_Subscribe = MessageFormat.format(messageValue_SubscribeBody, subscribeName,entity.getModifyTime(), entity.getTitle(), entity.getContent());
				mailService.Send(this.getClass().getSimpleName() + " - " + Thread.currentThread().getStackTrace()[1].getMethodName(),recipients , null, recipientBccs, mailSubject_Subscribe, mailBody_Subscribe, null);												
				entity.setPostId(postId);
			}

			// 3-審核中 → 6-編輯中(退回)
			if (status.equals("6")) {
				// 寄信
				// 收件者：entity.getEmail()
				// 主旨：H-ISAC勒索專區文章(entity.getPostId())審核退回通知
				// 內容：entity.getName()，您好！您所新增之勒索專區文章(entity.getPostId())，經H-ISAC內容審核者審核退回，請您儘快撥冗進行後續處理，謝謝！
				String mailSubject = MessageFormat.format(resourceMessageService.getMessageValue("mailMalware3To6Subject"), entity.getPostId());
				String mailBody = MessageFormat.format(resourceMessageService.getMessageValue("mailMalware3To6Body"), member.getName(), entity.getPostId());
				mailService.Send(this.getClass().getSimpleName() + " - " + Thread.currentThread().getStackTrace()[1].getMethodName(), member.getEmail(), member.getSpareEmail(), null, mailSubject, mailBody, null);
			}

			// 3-審核中 → 2-撤銷中
			if (status.equals("2")) {
				// 寄信
				// 收件者：entity.getEmail()
				// 主旨：H-ISAC勒索專區文章(entity.getPostId())審核撤銷通知
				// 內容：entity.getName()，您好！您所新增之勒索專區文章(entity.getPostId())，經H-ISAC內容審核者審核撤銷，請您儘快撥冗進行後續處理，謝謝！
				String mailSubject = MessageFormat.format(resourceMessageService.getMessageValue("mailMalware3Back2Subject"), entity.getPostId());
				String mailBody = MessageFormat.format(resourceMessageService.getMessageValue("mailMalware3Back2Body"), member.getName(), entity.getPostId());
				mailService.Send(this.getClass().getSimpleName() + " - " + Thread.currentThread().getStackTrace()[1].getMethodName(), member.getEmail(), member.getSpareEmail(), null, mailSubject, mailBody, null);
			}

			entity.setStatus(Long.parseLong(status));
			entity.setModifyId(memberId);
			entity.setModifyTime(now);
			malwareManagementDAO.update(entity);
			resetGlobalData();
			resetGlobalDataPublic();
			return entity;
		} catch (Exception e) {
			//e.printStackTrace();
			return null;
		}
	}

	/**
	 * 取得勒索專區資料流程
	 * 
	 * @param id
	 *            勒索專區資料Id
	 * @return 勒索專區資料
	 */
	public ViewMessageAlertEvent getById(String id) {
		return malwareManagementDAO.getById(id);
	}

	/**
	 * 取得勒索專區資料
	 * 
	 * @param json
	 *            查詢條件
	 * @return 勒索專區資料
	 */
	public List<ViewMalwareManagementMember> getSpList(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getSpList(obj);
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 取得勒索專區資料筆數
	 * 
	 * @param json
	 *            查詢條件
	 * @return 勒索專區資料筆數
	 */
	public long getSpListSize(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getSpListSize(obj);
		} catch (Exception e) {
			return 0;
		}
	}

	/**
	 * 取得勒索專區資料Form筆數
	 * 
	 * @param json
	 *            查詢條件
	 * @return 勒索專區資料筆數
	 */
	public long getSpFormCount(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getSpFormCount(obj);
		} catch (Exception e) {
			return 0;
		}
	}

	/**
	 * 取得勒索專區資料button count資料
	 * 
	 * @param json
	 *            查詢條件
	 * @return 勒索專區資料狀態筆數
	 */
	public List<SpButtonCount> getSpButtonCount(String json) {
		try {
			JSONObject obj = new JSONObject(json);
			return malwareManagementDAO.getSpButtonCount(obj);
		} catch (Exception e) {
			return null;
		}
	}

}
