package tw.gov.mohw.hisac.web.controller.api;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;

import tw.gov.mohw.hisac.web.service.MalwareScanService;
import tw.gov.mohw.hisac.web.WebCrypto;
import tw.gov.mohw.hisac.web.WebDatetime;
import tw.gov.mohw.hisac.web.WebMessage;
import tw.gov.mohw.hisac.web.controller.BaseController;
import tw.gov.mohw.hisac.web.dao.SystemLogVariable;
import tw.gov.mohw.hisac.web.domain.MalwareReport;
import tw.gov.mohw.hisac.web.filter.MyFilter;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
/**
 * 中繼站控制器
 */
@Controller
@RequestMapping(value = "/cyb/api", produces = "application/json; charset=utf-8")
public class c05_MalwareScanController extends BaseController {

	
	@Autowired
	private MalwareScanService malwareScanService;

	private String targetControllerName = "cyb";
	private String targetActionName = "c05";
	
	/**
	 * Upload file
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param model
	 *            Model
	 * @param file
	 *            MultipartFile
	 * @return JSON Format String of result
	 * @throws Exception
	 */
	@RequestMapping(value = "/c05/upload", method = RequestMethod.POST)
	public String uploadFile(Locale locale, Model model, HttpServletRequest httpRequest,
			@RequestParam("file") MultipartFile file) {
		JSONObject response = new JSONObject();
		if (menuService.getCreatePermission(getBaseMemberId(), targetControllerName, targetActionName)) {
			File convFile = new File(WebCrypto.generateUUID() + ".zip");
			try {
				FileUtils.writeByteArrayToFile(convFile, file.getBytes());
				byte[] bytes = malwareScanService.uploadFile(getBaseMemberId(), file.getOriginalFilename(), convFile)
						.toString().getBytes(StandardCharsets.UTF_8.toString());
				response.put("msg", WebMessage.getMessage("globalInsertDataSuccess", null, locale));
				response.put("success", true);
				systemLogService.insert(baseControllerName, baseActionName, "", SystemLogVariable.Action.Create,
						SystemLogVariable.Status.Success, baseIpAddress, getBaseMemberAccount());
			} catch (Exception e) {
				response.put("msg", WebMessage.getMessage("globalInsertDataFail", null, locale));
				response.put("success", false);
				systemLogService.insert(baseControllerName, baseActionName, "", SystemLogVariable.Action.Create,
						SystemLogVariable.Status.Fail, baseIpAddress, getBaseMemberAccount());
			}
		} else {
			response.put("msg", WebMessage.getMessage("globalPermissionDeny", null, locale));
			response.put("success", false);
			systemLogService.insert(baseControllerName, baseActionName, "", SystemLogVariable.Action.Create,
					SystemLogVariable.Status.Deny, baseIpAddress, getBaseMemberAccount());
		}
		model.addAttribute("json", response);
		return "msg";
	}

	/**
	 * 取得 MalwareScan list
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param model
	 *            Model
	 * @param json
	 *            查詢條件
	 * @return MalwareReports 資料
	 */
	@RequestMapping(value = "/c05/query", method = RequestMethod.POST)
	public String getMalwareReportByQuery(Locale locale, HttpServletRequest request, Model model,
			@RequestBody String json) {
		JSONObject jsonData = new JSONObject();
		JSONArray listjson = new JSONArray();
		JSONObject obj = new JSONObject(json);				
		jsonData.put("total", malwareScanService.getListSize(getBaseMemberId(), obj));
		List<MalwareReport> malwareReports = malwareScanService.getList(getBaseMemberId(), obj);
		if (null != malwareReports) {
			for (MalwareReport malwareReport : malwareReports) {
				JSONObject js = new JSONObject();
				js.put("Id", malwareReport.getId());
				js.put("Filename", malwareReport.getFilename());
				js.put("CreateTime", WebDatetime.toString(malwareReport.getCreateTime()));
				listjson.put(js);
			}
			jsonData.put("datatable", listjson);
		}
		model.addAttribute("json", jsonData.toString());
		return "msg";
	}

	/**
	 * Delete report
	 * 
	 * @param locale
	 *            Locale
	 * @param request
	 *            HttpServletRequest
	 * @param model
	 *            Model
	 * @param json
	 *            刪除條件
	 * @return JSON Format String of result
	 */
	@RequestMapping(value = "/c05/delete", method = RequestMethod.POST)
	public String deleteReport(Locale locale, HttpServletRequest request, Model model, @RequestBody String json) {
		JSONObject obj = new JSONObject(WebCrypto.getSafe(json));
		obj.put("memberId", getBaseMemberId());
		JSONObject response = new JSONObject();
		if (malwareScanService.deleteReport(obj)) {
			response.put("success", true);
			response.put("msg", WebMessage.getMessage("globalDeleteDataSuccess", null, locale));
		} else {
			response.put("success", false);
			response.put("msg", WebMessage.getMessage("globalDeleteDataFail", null, locale));
		}
		model.addAttribute("json", response);
		return "msg";
	}
}