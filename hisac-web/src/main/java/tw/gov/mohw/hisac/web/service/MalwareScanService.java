package tw.gov.mohw.hisac.web.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.LayeredConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import tw.gov.mohw.hisac.web.WebConfig;
import tw.gov.mohw.hisac.web.dao.MalwareReportDAO;
import tw.gov.mohw.hisac.web.domain.MalwareReport;


/**
 * 事故管理-附件
 */
@Service
public class MalwareScanService {
	@Autowired
	MalwareReportDAO malwareReportDAO;
	
	private String UPLOAD_URI = WebConfig.UPLOAD_URL;
	private String SEARCH_URI = WebConfig.SEARCH_URL;
	//final String[] urlWhiteList = { "211.72.129.118:5000", "211.72.129.118:5001" };	

	public JSONObject uploadFile(long baseMemberId, String filename, File file) {
		HttpEntity entity = MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE)
				.addPart("file", new FileBody(file)).build();
		HttpPost req = new HttpPost(UPLOAD_URI);
		req.setEntity(entity);

		JSONObject json = sendRequest(req);

		// create malware report
		if (json.isNull("error")) {
			MalwareReport malwareReport = new MalwareReport();
			malwareReport.setFilename(filename);
			malwareReport.setCreateId(baseMemberId);
			malwareReport.setData(json.toString());
			malwareReport.setCreateTime(new Date());			
			try {
				malwareReportDAO.insert(malwareReport);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return json;
	}

	private void makeScanUri(Map<String, String> m, String hash) {
		m.put("uri", String.format(SEARCH_URI, hash));
	}

	public JSONObject getScanDetail(JSONObject obj) {
		JSONObject json = new JSONObject();

		Long memberId = obj.optLong("memberId");

		List<MalwareReport> malwareReports = getList(memberId, obj);

		if (malwareReports == null || malwareReports.size() == 0) {
			return json;
		}

		json = new JSONObject(malwareReports.get(0).getData());

		return json;
	}

	public JSONObject getScanResult(JSONObject obj) {
		JSONObject json = new JSONObject();
		String hash = null;

		try {
			hash = obj.optString("hash");
			if (hash != null) {
				Map<String, String> m = new HashMap<String, String>();
				m.put("uri", SEARCH_URI);
				makeScanUri(m, hash);
				String getUri = m.get("uri");
				/*
				 * if (WebNet.securitySSRFUrlCheck(getUri, urlWhiteList)) { HttpGet req = new
				 * HttpGet(getUri); json = sendRequest(req); }
				 */
				HttpGet req = new HttpGet(getUri);
				json = sendRequest(req);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
	}

	private JSONObject sendRequest(HttpUriRequest request) {
		String result = "{}";
		try {
			HttpClient client = getHttpClient();
			if (request.getURI().getScheme().toLowerCase().equals("http")
					|| request.getURI().getScheme().toLowerCase().equals("https")) {
				HttpResponse response = client.execute(request);
				result = EntityUtils.toString(response.getEntity());
			} else {
				result = "{}";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		JSONObject json = new JSONObject(result);
		return json;
	}

	private HttpClient getHttpClient() {
		RegistryBuilder<ConnectionSocketFactory> registryBuilder = RegistryBuilder.<ConnectionSocketFactory>create();
		ConnectionSocketFactory plainSF = new PlainConnectionSocketFactory();
		registryBuilder.register("http", plainSF);
		try {
			KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
			TrustStrategy anyTrustStrategy = new TrustStrategy() {
				@Override
				public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
					return true;
				}
			};
			SSLContext sslContext = SSLContexts.custom().useTLS().loadTrustMaterial(trustStore, anyTrustStrategy)
					.build();
			LayeredConnectionSocketFactory sslSF = new SSLConnectionSocketFactory(sslContext,
					SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
			registryBuilder.register("https", sslSF);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		Registry<ConnectionSocketFactory> registry = registryBuilder.build();
		PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager(registry);
		HttpClient httpclient = HttpClientBuilder.create().setConnectionManager(connManager).build();

		return httpclient;
	}

	public List<MalwareReport> getList(Long memberId, JSONObject obj) {
		return malwareReportDAO.getList(memberId, obj);
	}

	public long getListSize(Long memberId, JSONObject obj) {
		return malwareReportDAO.getListSize(memberId, obj);
	}

	public boolean deleteReport(JSONObject obj) {
		Long memberId = obj.optLong("memberId");
		List<MalwareReport> malwareReports = getList(memberId, obj);

		if (malwareReports == null || malwareReports.size() == 0) {
			return false;
		}

		MalwareReport malwareReport = malwareReports.get(0);
		try {
			malwareReportDAO.delete(malwareReport);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

}
